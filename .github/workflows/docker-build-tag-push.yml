name: Docker Build, Test and Push

on:
  pull_request:
    branches: [  master ]
  push:
    branches: [ master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:test .
          
      - name: Run tests on the image
        run: |
          # Add your test commands here
          # Example: docker run --rm $IMAGE_NAME:test npm test
          # Or run any other validation tests
          echo "Running tests on the built image..."
          # Replace with your actual test commands
          docker run --rm $IMAGE_NAME:test echo "Test completed successfully"

  build-and-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Calculate version number
        id: version
        run: |
          # Get the latest version from Docker Hub tags or start from 1.0.1
          LATEST_VERSION=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/$(echo ${{ github.repository }} | cut -d'/' -f2)/tags/?page_size=100" | \
          jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' | \
          sort -V | tail -n 1 || echo "1.0.0")
          
          # Increment patch version
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "Latest version: $LATEST_VERSION"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update version file (optional)
        run: |
          echo "VERSION=${{ env.VERSION }}" > VERSION
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add VERSION
          git commit -m "Bump version to ${{ env.VERSION }}" || echo "No changes to commit"
          git push